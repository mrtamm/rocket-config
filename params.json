{"name":"Rocket-config","tagline":"Configuration library for applications when java.util.Properties is not enough.","body":"Rocket-Config Library\r\n=======================\r\n\r\n_Configuration library for applications when ``java.util.Properties`` is not enough._\r\n\r\nOverview\r\n--------\r\n\r\nThis library fills the gap between a configuration file and runtime configuration values. It introduces section-based\r\ncustomizable configuration file formats. Once file parsing is completed, an application has a runtime configuration\r\nobject that it can use to configure itself.\r\n\r\nSample configuration file:\r\n\r\n    [general]\r\n    # name-value pairs:\r\n    name    = HelloWorld\r\n    url     = https://www.example.org/\r\n    timeout = 10000\r\n\r\n    [entities]\r\n    # 3 classes:\r\n    org.example.entity.User\r\n    org.example.entity.UserGroup\r\n    org.example.entity.Widget\r\n\r\n    [filters ]\r\n    # 1 filter (an instance of this class):\r\n    org.example.filter.AuditFilter\r\n\r\nSample configuration object:\r\n\r\n```java\r\npublic class AcmeConfig {\r\n  private String name;\r\n  private String url;\r\n  private int timeout = 20000;\r\n  private Class[] entities;\r\n  private Filter[] filters;\r\n\r\n  public void setName(String name) { this.name = name; }\r\n  public void setUrl(String url) { this.url = url; }\r\n  public void setTimeout(int timeout) { this.timeout = timeout; }\r\n  public void setEntities(Class[] entities) { this.entities = entities; }\r\n  public void setFilters(Filter[] filters) { this.filters = filters; }\r\n}\r\n```\r\n\r\nSample _Rocket-Config_ usage: describes configuration file model according to which the stream is parsed, and data will\r\nbe stored in a new instance of target type.\r\n\r\n```java\r\nConfigModel<AcmeConfig> model = ConfigModel.expect(AcmeConfig.class)\r\n    .section(\"general\").ofMap().storeIn(\"name\", \"url\", \"timeout\")\r\n    .section(\"entities\").ofList(Class.class).storeIn(\"entities\")\r\n    .section(\"filters\").ofList(Filter.class).storeIn(\"filters\")\r\n    .ready();\r\n\r\nAcmeConfig conf = model.parse(getClass().getResourceAsStream(\"/acme.conf\"));\r\n```\r\n\r\nAs shown in the example, ``ws.rocket.config.ConfigModel`` class provides the main functionality to use and usually that's enough.\r\n\r\n### Dependencies ###\r\n\r\n_Rocket-Config_ only  requires _Java 1.6_ or new runtime.\r\n\r\n### Building ###\r\n\r\nThis project uses [Gradle](http://www.gradle.org/) for\r\n\r\n* downloading dependencies (automatically),\r\n* executing unit tests (``gradle test``),\r\n* building the project (``gradle jar``).\r\n\r\nTo view more available tasks, execute following command:\r\n\r\n\tgradle tasks [--all]\r\n\r\nGradle uses .``/build/`` directory for storing build process results:\r\n\r\n\t./build/libs/           - composed JAR file directory\r\n\t./build/docs/javadoc/   - generated JavaDoc directory\r\n\t./build/reports/tests/  - generated report for executed tests\r\n\r\nGradle can be configured by editing ``./build.gradle`` file.\r\n\r\n### License ###\r\n\r\nThis library is open-sourced with [Apache 2.0 license](http://www.apache.org/licenses/LICENSE-2.0) and is free to use.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}